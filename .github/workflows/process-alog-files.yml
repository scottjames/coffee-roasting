name: Process New .alog Files

on:
  push:
    branches:
      - main
    paths:
      - 'logs/*.alog'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  process-alog:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2  # fetch current and previous commit to detect changes

#      - name: Install ImageMagick
#        #run: sudo apt-get update && sudo apt-get install -y imagemagick
#        run: sudo apt-get install -y imagemagick

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m venv venv
          source venv/bin/activate
          python -m pip install --upgrade pip
          pip install -r artisanc/requirements.txt  # Uncomment if you have dependencies
          pip install Pillow

      - name: Detect new log files
        id: detect
        run: |
          # Get list of new or modified files in logs/ directory
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            # If manually triggered, process all log files
            NEW_FILES=$(find logs/ -type f -name "*.alog" 2>/dev/null || echo "")
          else
            # Get files changed in the last commit
            NEW_FILES=$(git diff --name-only --diff-filter=AM HEAD~1 HEAD | grep '^logs/.*\.alog$' || echo "")
          fi
          # HACK FIXME XXX
          NEW_FILES="logs/roast_25-10-11_1333.alog"
          
          if [ -z "$NEW_FILES" ]; then
            echo "No new log files detected"
            echo "has_new_files=false" >> $GITHUB_OUTPUT
          else
            echo "New log files detected:"
            echo "$NEW_FILES"
            echo "$NEW_FILES" > new_log_files.txt
            echo "has_new_files=true" >> $GITHUB_OUTPUT
          fi

      - name: Process log files
        if: steps.detect.outputs.has_new_files == 'true'
        run: |
          source venv/bin/activate
          
          # Create md directory if it doesn't exist
          mkdir -p md
          
          # Process each new log file
          while IFS= read -r log_file; do
            if [ -f "$log_file" ]; then
              echo "Processing $log_file"
              
              # Extract filename without path and extension
              filename=$(basename "$log_file" .alog)
              
              # Run artisanc/artisan_cli.py and redirect output to markdown file
              python artisanc/artisanc_cli.py --metrics -o md "$log_file" > "md/${filename}.md"
              
              echo "Created md/${filename}.md"
            fi
          done < new_log_files.txt
      

      - name: Update README.md
        if: steps.detect.outputs.has_new_files == 'true'
        run: |
          source venv/bin/activate
          # Create README.md if it doesn't exist
          #if [ ! -f md/README.md ]; then
          #  cat > md/README.md <<'EOF'
          #  # Log Analysis Reports
          #  This directory contains automatically generated analysis reports from log files.
          #  ## Reports
          #  EOF
          #fi
          
          # Add links to newly processed files
          while IFS= read -r log_file; do
            if [ -f "$log_file" ]; then
              filename=$(basename "$log_file" .alog)
              
              # Check if link already exists in README
              if ! grep -q "\[${filename}\]" md/README.md; then
                # Get current date
                DATE=$(date '+%Y-%m-%d %H:%M:%S')

                # Get alog image, make smaller image
                IMG="/coffee-roasting/logs/img/${filename}.png"
                SM="/coffee-roasting/logs/img/${filename}.small.png"
                IFILE="../logs/img/${filename}.png"
                SFILE="../logs/img/${filename}.small.png"
                #convert "$IFILE" -resize 50% "$SFILE"

                # Resize to specific height (auto width)
                python -m PIL "$IFILE" --size 0x300 --output "$SFILE"
                
                # Append link to README
                #echo "- [${filename}](${filename}.md) [image]($IMG) - Generated on ${DATE}" >> md/README.md
                echo "- [${filename}](${filename}.md) [ :framed_picture: ]($SM) - added ${DATE}" >> md/README.md
                #echo "- [${filename}](${filename}.md) [image]($IMG)" >> md/README.md
                
                echo "Added ${filename} to README.md"
              fi
            fi
          done < new_log_files.txt
      
      - name: Commit and push changes
        if: steps.detect.outputs.has_new_files == 'true'
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          
          git add md/*.md
          git add logs/img/*.png
          
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Generate markdown reports for new log files [skip ci]"
            git push
          fi

